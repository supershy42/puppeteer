services:
  api_gateway:
    container_name: api_gateway
    init: true
    build:
      context: ./api_gateway
    ports:
      - "80:80"
    env_file:
      - ./.env
    depends_on:
      - auth
      - user
      - game
      - chat
    networks:
      - backend
  
  auth:
    container_name: auth
    init: true
    build:
      context: ./auth
    env_file:
      - ./.env
    networks:
      - backend

  user:
    container_name: user
    init: true
    build:
      context: ./user
    env_file:
      - ./.env
      - ./user/.env
    depends_on:
      - database_user
    networks:
      - backend

  chat:
    container_name: chat
    init: true
    build:
        context: ./chat
    env_file:
      - ./.env
      - ./chat/.env
    depends_on:
    - database_chat
    networks:
      - backend

  game:
    container_name: game
    init: true
    build:
      context: ./game
    env_file:
      - ./.env
      - ./game/.env
    depends_on:
    - database_game
    networks:
      - backend
  
  frontend:
    container_name: frontend
    init: true
    build:
      context: ./frontend
    ports:
      - "3000:3000"  # 포트 설정
    env_file:
      - ./.env
      - ./frontend/.env

  database_user:
    container_name: database_user
    init: true
    build:
      context: ./database_user
    env_file:
      - ./.env
      - ./user/.env
    volumes:
      - db_user_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h database_user -p ${POSTGRES_PORT} -U ${DB_USER_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  database_chat:
    container_name: database_chat
    init: true
    build:
      context: ./database_chat
    env_file:
      - ./.env
      - ./chat/.env
    volumes:
      - db_chat_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h database_chat -p ${POSTGRES_PORT} -U ${DB_CHAT_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
  
  database_game:
    container_name: database_game
    init: true
    build:
      context: ./database_game
    env_file:
      - ./.env
      - ./game/.env
    volumes:
      - db_game_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h database_game -p ${POSTGRES_PORT} -U ${DB_GAME_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis_events:
    image: redis:latest
    container_name: redis_events
    init: true
    networks:
      - backend

  redis_websockets:
    image: redis:latest
    container_name: redis_websockets
    init: true
    networks:
      - backend
  
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    ports:
      - "8080:8080"  # Expose Dozzle on port 8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Access Docker logs
    restart: unless-stopped
    networks:
      - backend

  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - "8081:8080"  # Expose Adminer on port 8081
    restart: unless-stopped
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  db_chat_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH}/chat
      o: bind

  db_game_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH}/game
      o: bind

  db_user_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH}/user
      o: bind

  redis_events_data:
    driver: local

  redis_websockets_data:
    driver: local