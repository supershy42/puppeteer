services:
  api_gateway:
    build:
      context: ./api_gateway
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - ./.env
    depends_on:
      # - auth
      - user
      # - game
      # - chat
    networks:
      - backend

  auth:
    build:
      context: ./auth
    expose:
      - "8000"
    env_file:
      - ./.env
    networks:
      - backend

  user:
    build:
      context: ./user
    expose:
      - "8001"
    env_file:
      - ./.env
      - ./user/.env
    environment:
      DATABASE_URL: ${DATABASE_USER_URL}
    networks:
      - backend

  # chat:
  #   build:
  #     context: ./chat
  #   expose:
  #     - "8002"
  #   env_file:
  #     - ./.env
  #   environment:
  #     DATABASE_URL: ${DATABASE_CHAT_URL}
  #   networks:
  #     - backend

  game:
    container_name: game
    init: true
    build:
      context: ./game
    env_file:
      - ./.env
      - ./game/.env
    depends_on:
    - database_game
    networks:
      - backend

  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000"  # 포트 설정
    env_file:
      - ./frontend/.env
      - ./.env
    networks:
      - backend

  database_chat:
    container_name: database_chat
    init: true
    build:
      context: ./database_chat
    env_file:
      - ./.env
      - ./chat/.env
    volumes:
      - db_chat_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h database_chat -p ${POSTGRES_PORT} -U ${DB_CHAT_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  database_game:
    container_name: database_game
    init: true
    build:
      context: ./database_game
    env_file:
      - ./.env
      - ./game/.env
    volumes:
      - db_game_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h database_game -p ${POSTGRES_PORT} -U ${DB_GAME_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # database_chat:
  #   build:
  #     context: ./database_chat
  #   container_name: db_chat
  #   env_file:
  #     - ./.env
  #   environment:
  #     POSTGRES_USER: ${DB_CHAT_USER}
  #     POSTGRES_PASSWORD: ${DB_CHAT_PASSWORD}
  #     POSTGRES_DB: ${DB_CHAT_NAME}
  #   volumes:
  #     - db_chat_data:/var/lib/postgresql/data
  #   networks:
  #     - backend

  redis_websockets:
    image: redis:latest
    container_name: redis_websockets
    init: true
    networks:
      - backend

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    ports:
      - "8080:8080"  # Expose Dozzle on port 8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Access Docker logs
    restart: unless-stopped
    networks:
      - backend

  # redis_events:
  #   image: redis:latest
  #   container_name: redis_events
  #   volumes:
  #     - redis_events_data:/data
  #   networks:
  #     - backend

  # redis_websockets:
  #   image: redis:latest
  #   container_name: redis_websockets
  #   volumes:
  #     - redis_websockets_data:/data
  #   networks:
  #     - backend

networks:
  backend:
    driver: bridge

volumes:
  db_chat_data:
    driver: local
    driver_opts:
      type: none
      device: /Users/spark2/Desktop/puppeteer/srcs/data/chat
      o: bind

  db_game_data:
    driver: local
    driver_opts:
      type: none
      device: /Users/spark2/Desktop/puppeteer/srcs/data/game
      o: bind

  db_user_data:
    driver: local
    driver_opts:
      type: none
      device: /Users/spark2/Desktop/puppeteer/srcs/data/user
      o: bind

  # redis_events_data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     device: ./redis_events
  #     o: bind

  # redis_websockets_data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     device: ./redis_websockets
  #     o: bind